//program1
public static int[] twoSum(int[] nums, int target)
    {
        Map<Integer, Integer> hmp = new HashMap<>();
        int n = nums.length;
        for(int i=0;i<n;i++)
        {
            hmp.put(nums[i],i);
        }
        for(int i=0;i<n;i++)
        {
            int complement = target-nums[i];
            if(hmp.containsKey(complement) && hmp.get(complement) !=i)
            {
                return new int[]{i, hmp.get(complement)};
            }
        }
        return new int[] {};
    }
//program 2
public void sortColors(int[] nums) {
       int red=0;
       int white =0;
       int blue=0;
       int var=0;
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]==0)
            {
                red++;
            }
            else if(nums[i]==1)
            {
                white++;
            }
            else 
            {
                blue++;
            }
        }
        int index=0;
        for(int i=0;i<red;i++)
        {
            nums[index++]=0;
        }
       for(int i=0;i<white;i++)
       {
        nums[index++]=1;
       }
       for(int i=0;i<blue;i++)
       {
        nums[index++]=2;
       }
        for(int i: nums)
        {
            System.out.print(i+" ");
        } 
    }
//program 3
public int majorityElement(int[] nums) {
        int majElement=nums[0];
        int count = 1;
        for(int i=1;i<nums.length;i++)
        {
            if(count==0)
            {
                majElement=nums[i];
                count=1;
            }else if (nums[i]==majElement)
            {
                count++;
            }else{
                count--;
            }
        }
        return majElement;
    }
//program 4
public int maxSubArray(int[] nums) {
        int currentSum=0;
        int maxSum = Integer.MIN_VALUE;
        for(int i=0; i<nums.length;i++)
        {
            currentSum +=nums[i];
            maxSum = Math.max(currentSum, maxSum);
            if(currentSum <0){
            currentSum =0;
            }
        }
        return maxSum;
    }

