//one
public static int countDigit(int n)
    {
        int count = 0;
        while(n!=0)
        {
            int last =n%10;
            count++;
            n=n/10;
        }
        return count;
    }
//two
    public static int reverse(int n) {
        int sum=0;
        while(n!=0)
        {
            int last=n%10;
            sum= sum *10 + last;
            n=n/10;
            if(sum>Integer.MAX_VALUE/10 || (sum==Integer.MAX_VALUE/10 && last>7))
            {
                return 0;
            }
            if(sum<Integer.MIN_VALUE/10 || (sum==Integer.MIN_VALUE/10 && last <-8))
            {
                return 0;
            }
            
        }
        return sum;
    }
//four
    public static int GCD(int n1, int n2)
    {
        if(n1==0)
       {
        return n2;
       }
       if(n2==0)
       {
        return n1;
       }
       int greater = (n1<n2)?n2:n1;
       int lesser = (n1<n2)?n1:n2;
       int remainder;
       while(lesser!=0)
       {
        remainder=(greater%lesser);
       greater=lesser;
       lesser=remainder;
       }
      return greater; 
    }
    public static int findGCD(int[] nums)
    {
        int smallest = Integer.MAX_VALUE;
        int largest = Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++)
        {
            if(smallest>nums[i])
            {
                smallest=nums[i];
            }
            if(largest<nums[i])
            {
                largest = nums[i];
            }
        }
        if(smallest==0)
        return largest;
        if(largest==0)
        return smallest;
        int remainder;
       while(smallest!=0)
       {
        remainder=(largest%smallest);
       largest=smallest;
       smallest=remainder;
       }
      return largest;
    }
//six
    public static int[] divisors(int n) {
        int count=0;
        for(int i=1;i<=n;i++)
        {
            if(n%i==0)
            count++;
        }
        int[] res = new int[count];
        int index=0;
        for(int i=1;i<=n;i++)
        {
            if(n%i==0)
            {
                res[index]=i;
                index++;
            } 
        }
        return res;
    }
//seven
    public static boolean isPrime(int n) {
        if(n<=1)
        {
            return false;
        }
        for(int i=2;i<=Math.sqrt(n);i++)
        {
            if(n%i==0)
            {
                return false;
            }
        }
        return true;
  }
//five
  public static boolean isArmstrong(int n)
  {
    int sum=0;
    int original = n;
    while(n>0)
    {
        int last = n%10;
        sum=(last*last*last)+sum;
        n=n/10;

        if(sum==original)
        {
            return true;
        }
    }
    return false;
  }
//three
    public boolean isPalindrome(int x) {
StringBuilder sb = new StringBuilder(String.valueOf(x));
        StringBuilder sbb = new StringBuilder(sb);
        sbb.reverse();
        if(sb.toString().equals(sbb.toString()))
        {
            return true;
        }        
        return false;
    }
