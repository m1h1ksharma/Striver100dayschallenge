//program5
   public static int maxProfit(int[] prices)
    {
        Pair<Integer, Integer> result = min(prices);
        int min=result.getKey(); 
        int index=result.getValue();
        if(index==prices[prices.length-1])
        {
            return 0;
        }
        int max=max(prices,index);
        int maxProfitt = max-min;
        return maxProfitt;
        
    }
    private static Pair<Integer, Integer> min(int[] prices)
    {
        int min=prices[0];
        int j=0;
        for(int i=1;i<prices.length;i++)
        {
            if(prices[i]<min)
            {
                min=prices[i];
                j=i;
            }  
        }
        return new Pair<>(min,j);
    }
    private static int max(int[] prices, int startIndex) {
        int max = prices[startIndex];
        for (int i = startIndex + 1; i < prices.length; i++) {
            if (prices[i] > max) {
                max = prices[i];
            }
        }
        return max;
    }
//program 6
  public static void nextPermutation(int[] nums)
    {
       int n = nums.length, i=n-2;
       while(i>=0 && nums[i]>=nums[i+1])
       {
        i--;
       }
       if (i>=0) {
        int j = n-1;
        while (nums[j]<=nums[i]) {
            j--;
        }
        int temp = nums[i];
        nums[i]=nums[j];
        nums[j] = temp;
       }
       reverse(nums,i+1,n-1);
    }
    private static void reverse(int[] nums, int start , int end)
    {
        while(start<end)
        {
            int temp=nums[start];
            nums[start]=nums[end];
            nums[end]=temp;
            start++;
            end--;
        }
    }
