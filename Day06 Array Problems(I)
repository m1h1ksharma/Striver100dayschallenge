//program 1
public static int largestElement(int[] nums)
    {
        int largest =nums[0];
        for(int i: nums)
        {
            if(largest<i)
            {
                largest = i;
            }
        }
        return largest;
    }
//program 2
    public static int secLargest(int[] nums)
    {
        int largest =Integer.MIN_VALUE;
        int secLargest=Integer.MIN_VALUE;
        if(nums.length<=1)
        {
            return -1;
        }

        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]>largest)
            {
                secLargest = largest;
                largest = nums[i];
            }
            else if(nums[i]>secLargest && nums[i]!=largest)
            {
                secLargest=nums[i];
            }
        }
        return (secLargest == Integer.MIN_VALUE) ? -1 : secLargest;
    }
//program 3
    public static boolean arraySortedOrNot(int[] nums)
    {
        for(int i=0;i<nums.length-1;i++)
        {
            if(nums[i]>nums[i+1])return false;
        }
       return true;
    }
   
//program 4
public int removeDuplicates(int[] nums) {
        int j = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] != nums[i - 1]) {
                nums[j] = nums[i];
                j++;
            }
        }
        return j;
    }
//program 5 and 6
    public static void rotate(int[] nums, int target)
    {
            target=target%nums.length;
        int n=nums.length;
        int[] arr=new int[target];
        for(int i=0;i<target;i++)
        {
            arr[i]=nums[n-target+i];
        }
        for(int j=n-1;j>=target;j--)
        {
            nums[j]=nums[j-target];
        }

        for(int j=0;j<target;j++)
        {
            nums[j]=arr[j];
        }
        for(int i:nums)
        {
            System.out.print(i+" ");
        }
    }
//program 8
 public static int linearSearch(int[] arr,int target)
    {
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]==target)
            {
                return i;
            }
        }
        return -1;
    }
//program 10
public static int missingNumber(int[] nums)
    {
        int n = nums.length;
    int expectedSum = n * (n + 1) / 2;
    int actualSum = 0;
    
    for (int num : nums) {
        actualSum += num;
    }
    return expectedSum - actualSum;
    }
//program 11
    public static int findMaxConsecutiveOnes(int[] nums)
    {
        int count=0,temp=0;
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]==1)
            {
                count++;
            
            if(count>temp)
            {
                temp=count;
            }
        }
        else{
            count=0;
        }
        }
        return temp;

        }
//program 12
    public static int singleNumber(int[] nums)
    {
        int occ=0;
        for(int i=0;i<nums.length;i++)
        {
        boolean mila=false;

            occ = nums[i];
            for(int j=0;j<nums.length;j++)
            {
                if(i!=j && nums[i]==nums[j])
                {
                    mila=true;
                    break;
                }
            }
            if(!mila)
            {
                return nums[i];
            }
        }
        return -1;
    }


